# Load necessary libraries
library(dplyr)
library(tidyr)
library(gt)

#THIS IS A NEW WAY TO PROCESS A CSV IN ORDER TO USE unique_citations ONLY, unique_citations HAS ALL THE SAME DATA AS EXPORTED CSV SO WILL WORK ON BOTH
#REPLACEMENT FOR current record_counts function
# Define the process_citations function
process_citations <- function(unique_citations, labels_to_include = NULL) {
  
  # Check if necessary columns exist
  required_columns <- c("cite_source", "cite_label", "duplicate_id")
  if (!all(required_columns %in% colnames(unique_citations))) {
    stop("The dataset does not contain the required columns.")
  }
  
  # Split and expand the cite_source column
  df_expanded <- unique_citations %>%
    separate_rows(cite_source, sep = ",") %>%
    mutate(cite_source = trimws(cite_source))
  
  # Filter by user-specified labels if provided
  if (!is.null(labels_to_include) && length(labels_to_include) > 0) {
    pattern <- paste(labels_to_include, collapse = "|")
    df_filtered <- df_expanded %>%
      filter(grepl(pattern, cite_label, ignore.case = TRUE))
  } else {
    df_filtered <- df_expanded
  }
  
  # Check if df_filtered is empty
  if (nrow(df_filtered) == 0) {
    return(data.frame(Source = character(), Records_Imported = integer(), Distinct_Records = integer()))
  }
  
  # Count the occurrences of each source to determine the "Records Imported"
  records_imported <- df_filtered %>%
    group_by(cite_source) %>%
    summarise(Records_Imported = n(), .groups = 'drop')
  
  # Count the unique duplicate_id values for each source to determine the "Distinct Records"
  distinct_records <- df_filtered %>%
    group_by(cite_source) %>%
    summarise(Distinct_Records = n_distinct(duplicate_id), .groups = 'drop')
  
  # Merge the two dataframes to get the final result
  result <- merge(records_imported, distinct_records, by = "cite_source")
  
  # Calculate the total counts
  total_records_imported <- sum(result$Records_Imported)
  total_distinct_records <- sum(result$Distinct_Records)
  
  # Add the total counts to the result dataframe
  total_row <- data.frame(cite_source = "Total",
                          Records_Imported = total_records_imported,
                          Distinct_Records = total_distinct_records)
  result <- bind_rows(result, total_row)
  
  # Rename columns for consistency with gt table
  result <- result %>%
    rename(Source = cite_source)
  
  # Return the final result
  return(result)
}


#THIS TABLE CAN REPLACE THE CURRENT record_counts_table
# Define the record_counts_table function
record_counts_table <- function(data) {
  # Check if data is empty
  if (nrow(data) == 0) {
    return(gt::gt(data.frame(Source = character(), `Records Imported` = integer(), `Distinct Records` = integer())))
  }
  
  # Create the initial gt table
  data %>%
    gt::gt(rowname_col = "Source") %>%
    gt::tab_header(title = "Record Counts") %>%
    
    # Label the columns
    gt::cols_label(
      Records_Imported = "Records Imported",
      Distinct_Records = "Distinct Records"
    ) %>%
    
    # Add footnote for "Records Imported"
    gt::tab_footnote(
      footnote = "Number of records imported from each source.",
      locations = gt::cells_column_labels(
        columns = c("Records_Imported")
      )
    ) %>%
    
    # Add footnote for "Distinct Records"
    gt::tab_footnote(
      footnote = "Number of records after internal source deduplication",
      locations = gt::cells_column_labels(
        columns = c("Distinct_Records")
      )
    )
}

# Example usage
# Assuming unique_citations is already loaded in the environment

# Example 1 with search and benchmark cite_labels 
#result1 <- process_citations(unique_citations, labels_to_include = c("search", "Benchmark"))
#formatted_table1 <- record_counts_table(result1)

# Print the formatted table
#formatted_table1

# Example 2 with search label only
#result2 <- process_citations(unique_citations, labels_to_include = c("search"))
#formatted_table2 <- record_counts_table(result2)

# Print the formatted table
#formatted_table2

# Example 3 with no labels noted to include (this will include all sources regardless of lables)
#result3 <- process_citations(unique_citations)
#formatted_table3 <- record_counts_table(result3)

# Print the formatted table
#formatted_table3

#NEW calculate_record_counts THAT RELIES ON unique_citations and n_unique (removes reliance on raw_citations)
calculate_record_counts2 <- function(unique_citations, n_unique, labels_to_include = NULL) {
  
  # Check if necessary columns exist
  required_columns <- c("cite_source", "cite_label", "duplicate_id")
  if (!all(required_columns %in% colnames(unique_citations))) {
    stop("The dataset does not contain the required columns.")
  }
  
  # Split and expand the cite_source column
  df_expanded <- unique_citations %>%
    separate_rows(cite_source, sep = ",") %>%
    mutate(cite_source = trimws(cite_source))
  
  # Filter by user-specified labels if provided
  if (!is.null(labels_to_include) && length(labels_to_include) > 0) {
    pattern <- paste(labels_to_include, collapse = "|")
    df_filtered <- df_expanded %>%
      filter(grepl(pattern, cite_label, ignore.case = TRUE))
  } else {
    df_filtered <- df_expanded
  }
  
  # Check if df_filtered is empty
  if (nrow(df_filtered) == 0) {
    return(data.frame(Source = character(), `Records Imported` = integer(), `Distinct Records` = integer(), `Unique records` = integer(), `Non-unique Records` = integer()))
  }
  
  # Count the occurrences of each source to determine the "Records Imported"
  records_imported <- df_filtered %>%
    group_by(cite_source) %>%
    summarise(`Records Imported` = n(), .groups = 'drop')
  
  # Count the unique duplicate_id values for each source to determine the "Distinct Records"
  distinct_records <- df_filtered %>%
    group_by(cite_source) %>%
    summarise(`Distinct Records` = n_distinct(duplicate_id), .groups = 'drop')
  
  # Filter n_unique data to only include records with 'search' as the citation label
  n_unique_citations_count <- n_unique %>%
    filter(cite_label == "search") %>%
    group_by(cite_source) %>%
    summarise(`Unique records` = sum(unique), .groups = 'drop') %>%
    filter(cite_source != "") %>%
    arrange(cite_source)
  
  # Merge the three counts (initial, distinct, unique) into a single dataframe
  citation_counts <- left_join(records_imported, distinct_records, by = "cite_source") %>%
    left_join(n_unique_citations_count, by = "cite_source")
  
  # Calculate the number of non-unique records by subtracting the number of unique records from the total records
  citation_counts <- citation_counts %>%
    mutate(`Non-unique Records` = `Distinct Records` - `Unique records`)
  
  # Calculate and add three percentages: the contribution of each source to the total,
  # the contribution of unique records of each source to the total unique records,
  # and the proportion of unique records in each source's distinct records
  citation_counts <- citation_counts %>%
    mutate(`Source Contribution %` = `Distinct Records` / sum(`Distinct Records`, na.rm = TRUE),
           `Source Unique Contribution %` = `Unique records` / sum(`Unique records`, na.rm = TRUE),
           `Source Unique %` = `Unique records` / `Distinct Records`)
  
  citation_counts <- citation_counts %>%
    mutate(
      `Source Contribution %` = as.numeric(`Source Contribution %`),
      `Source Unique Contribution %` = as.numeric(`Source Unique Contribution %`),
      `Source Unique %` = as.numeric(`Source Unique %`)
    ) %>%
    mutate(
      `Source Contribution %` = scales::percent(`Source Contribution %`, accuracy = 0.1),
      `Source Unique Contribution %` = scales::percent(`Source Unique Contribution %`, accuracy = 0.1),
      `Source Unique %` = scales::percent(`Source Unique %`, accuracy = 0.1)
    )
  
  # Calculate the totals
  total_records_imported <- sum(citation_counts$`Records Imported`, na.rm = TRUE)
  total_distinct_records <- nrow(unique_citations)
  total_unique_records <- sum(citation_counts$`Unique records`, na.rm = TRUE)
  total_nonunique_records <- sum(citation_counts$`Non-unique Records`, na.rm = TRUE)
  
  # Add totals to the citation_counts dataframe
  calculated_counts2 <- tibble::add_row(citation_counts, 
                                       cite_source = "Total", 
                                       `Records Imported` = total_records_imported,
                                       `Distinct Records` = total_distinct_records,
                                       `Unique records` = total_unique_records,
                                       `Non-unique Records` = total_nonunique_records)
  
  # Rename columns for consistency
  calculated_counts2 <- calculated_counts2 %>%
    rename(Source = cite_source)
  
  # Return the final counts dataframe
  return(calculated_counts2)
}

#NEW record_summary_table that relies on output of new calculated_counts2 function (only on processed data)
record_summary_table2<- function(data) {
  # Ensure column names match those in the data
  data %>%
    gt::gt(rowname_col = "Source") %>%
    gt::tab_header(title = "Record Counts") %>%
    
    # Label the columns
    gt::cols_label(
      `Records Imported` = "Records Imported",
      `Distinct Records` = "Distinct Records",
      `Unique records` = "Unique records",
      `Non-unique Records` = "Non-unique Records",
      `Source Contribution %` = "Records Contributed %",
      `Source Unique Contribution %` = "Unique Records Contributed %",
      `Source Unique %` = "Unique Records %"
    ) %>%
    
    # Add footnotes for the columns
    gt::tab_footnote(
      footnote = "Number of raw records imported from each database.",
      locations = gt::cells_column_labels(
        columns = "Records Imported"
      )
    ) %>%
    gt::tab_footnote(
      footnote = "Number of records after internal source deduplication",
      locations = gt::cells_column_labels(
        columns = "Distinct Records"
      )
    ) %>%
    gt::tab_footnote(
      footnote = "Number of records not found in another source.",
      locations = gt::cells_column_labels(
        columns = "Unique records"
      )
    ) %>%
    gt::tab_footnote(
      footnote = "Number of records found in at least one other source.",
      locations = gt::cells_column_labels(
        columns = "Non-unique Records"
      )
    ) %>%
    gt::tab_footnote(
      footnote = "Percent distinct records contributed to the total number of distinct records.",
      locations = gt::cells_column_labels(
        columns = "Source Contribution %"
      )
    ) %>%
    gt::tab_footnote(
      footnote = "Percent of unique records contributed to the total unique records.",
      locations = gt::cells_column_labels(
        columns = "Source Unique Contribution %"
      )
    ) %>%
    gt::tab_footnote(
      footnote = "Percentage of records that were unique from each source.",
      locations = gt::cells_column_labels(
        columns = "Source Unique %"
      )
    ) %>%
    gt::tab_footnote(
      footnote = "Total citations discovered (after internal and cross-source deduplication)",
      locations = gt::cells_body(
        columns = "Distinct Records",
        rows = "Total"
      )
    )
}
