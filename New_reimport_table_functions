# Load necessary libraries
library(dplyr)
library(tidyr)
library(gt)

#THIS IS A NEW WAY TO PROCESS A CSV IN ORDER TO USE unique_citations ONLY, unique_citations HAS ALL THE SAME DATA AS EXPORTED CSV SO WILL WORK ON BOTH
#REPLACEMENT FOR current record_counts function
# Define the process_citations function
process_citations <- function(unique_citations, labels_to_include = NULL) {
  
  # Check if necessary columns exist
  required_columns <- c("cite_source", "cite_label", "duplicate_id")
  if (!all(required_columns %in% colnames(unique_citations))) {
    stop("The dataset does not contain the required columns.")
  }
  
  # Split and expand the cite_source column
  df_expanded <- unique_citations %>%
    separate_rows(cite_source, sep = ",") %>%
    mutate(cite_source = trimws(cite_source))
  
  # Filter by user-specified labels if provided
  if (!is.null(labels_to_include) && length(labels_to_include) > 0) {
    pattern <- paste(labels_to_include, collapse = "|")
    df_filtered <- df_expanded %>%
      filter(grepl(pattern, cite_label, ignore.case = TRUE))
  } else {
    df_filtered <- df_expanded
  }
  
  # Check if df_filtered is empty
  if (nrow(df_filtered) == 0) {
    return(data.frame(Source = character(), Records_Imported = integer(), Distinct_Records = integer()))
  }
  
  # Count the occurrences of each source to determine the "Records Imported"
  records_imported <- df_filtered %>%
    group_by(cite_source) %>%
    summarise(Records_Imported = n(), .groups = 'drop')
  
  # Count the unique duplicate_id values for each source to determine the "Distinct Records"
  distinct_records <- df_filtered %>%
    group_by(cite_source) %>%
    summarise(Distinct_Records = n_distinct(duplicate_id), .groups = 'drop')
  
  # Merge the two dataframes to get the final result
  result <- merge(records_imported, distinct_records, by = "cite_source")
  
  # Calculate the total counts
  total_records_imported <- sum(result$Records_Imported)
  total_distinct_records <- sum(result$Distinct_Records)
  
  # Add the total counts to the result dataframe
  total_row <- data.frame(cite_source = "Total",
                          Records_Imported = total_records_imported,
                          Distinct_Records = total_distinct_records)
  result <- bind_rows(result, total_row)
  
  # Rename columns for consistency with gt table
  result <- result %>%
    rename(Source = cite_source)
  
  # Return the final result
  return(result)
}


#THIS TABLE CAN REPLACE THE CURRENT record_counts_table
# Define the record_counts_table function
record_counts_table <- function(data) {
  # Check if data is empty
  if (nrow(data) == 0) {
    return(gt::gt(data.frame(Source = character(), `Records Imported` = integer(), `Distinct Records` = integer())))
  }
  
  # Create the initial gt table
  data %>%
    gt::gt(rowname_col = "Source") %>%
    gt::tab_header(title = "Record Counts") %>%
    
    # Label the columns
    gt::cols_label(
      Records_Imported = "Records Imported",
      Distinct_Records = "Distinct Records"
    ) %>%
    
    # Add footnote for "Records Imported"
    gt::tab_footnote(
      footnote = "Number of records imported from each source.",
      locations = gt::cells_column_labels(
        columns = c("Records_Imported")
      )
    ) %>%
    
    # Add footnote for "Distinct Records"
    gt::tab_footnote(
      footnote = "Number of records after internal source deduplication",
      locations = gt::cells_column_labels(
        columns = c("Distinct_Records")
      )
    )
}

# Example usage
# Assuming unique_citations is already loaded in the environment

# Example 1 with search and benchmark cite_labels 
result1 <- process_citations(unique_citations, labels_to_include = c("search", "Benchmark"))
formatted_table1 <- record_counts_table(result1)

# Print the formatted table
formatted_table1

# Example 2 with search label only
result2 <- process_citations(unique_citations, labels_to_include = c("search"))
formatted_table2 <- record_counts_table(result2)

# Print the formatted table
formatted_table2

# Example 3 with no labels noted to include (this will include all sources regardless of lables)
result3 <- process_citations(unique_citations)
formatted_table3 <- record_counts_table(result3)

# Print the formatted table
formatted_table3
